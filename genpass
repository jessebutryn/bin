#!/usr/bin/env bash
#
# This script will produce randomly generated passwords.  By default these will be a selection of words from your local
# dictionary file.  It defaults to generating ten different 16 character passwords, these can be changed using the
# -l option for password length and -n option for number of passwords to generate.  The -c option can add complexity to
# the dictionary words by randomly capitalizing letters and/or changing them to numbers or special characters.  The -w
# option will retain the spaces between words increasing the chances that your password will read like a phrase.
#
# Alternatively the -r option can be used to generate truly random passwords.  This option is also significantly faster
# than scraping the dictionary file for words.
#
#set -x
#############################
dict=/usr/share/dict/words
l=16
n=10
#############################
squeeze () {
	if [[ $words == true ]]; then
		tr '\n' ' '
	else
		tr -d '\n'
	fi
}
really_random () {
	local length=$1
	local pass
	local n
	local characters=(
	{A..z}
	{0..9}
	'!'
	'@'
	'#'
	'$'
	'%'
	'&'
	'*'
	'('
	')'
	'-'
	'+'
	'='
	)
	until [[ "${#pass}" -eq "$length" ]]; do
		n=$(( RANDOM % ${#characters[@]} ))
		pass="${pass}${characters[n]}"
	done
	echo "$pass"
}
randomize () {
	local input=$1
	local length=${#input}
	local index=0
	local char
	local string
	while [[ $index -lt $length ]]; do
		char=${input:$index:1}
		if (( ( RANDOM % 10 ) < 3 )); then
			case $char in
				a)	char='@';;
				e)	char=3;;
				i)	char='!';;
				l)	char=1;;
				o)	char=0;;
				s)	char='$';;
				t)	char=7;;
				z)	char=2;;
				*)	char=${char^};;
			esac
		fi
		string="${string}${char}"
		((index++))
	done
	echo "$string"
}
r_sum () {
	local total=$1
	local remain=$total
	local temp
	local arr=()
	until (( $remain == 0 )); do
		if (( $remain <= 3 )); then
			arr+=( "$remain" )
			break
		fi
		temp=$(( RANDOM % ( remain - 2 ) + 1 ))
		(( temp > 24 )) && temp=$(( RANDOM % 23 + 1 ))
		[[ $temp -le 1 ]] && continue
		(( remain -= temp ))
		arr+=( "$temp" )
	done
	echo "${arr[@]}" | tr ' ' '\n' | sort -R | tr '\n' ' '
}
gen_pass () {
	{
	for l; do
		if [[ $complex == true ]]; then
			randomize $(awk -v l="$l" 'length == l' "$dict" | sort -R | tail -1)
		else
			awk -v l="$l" 'length == l' "$dict" | sort -R | tail -1
		fi
	done 
	} | squeeze
	echo
}
#############################
while getopts l:n:cwr opt; do
	case $opt in
		l)	l=$OPTARG;;
		n)	n=$OPTARG;;
		c)	complex=true;;
		w)	words=true;;
		r)	random=true;;
		*)	echo "ERROR: Unknown argument: $opt" >&2; exit 1;;
	esac
done
#############################
for ((i=0;i<n;i++)); do
	if [[ $random == true ]]; then
		really_random "$l"
	else
		gen_pass $(r_sum "$l")
	fi
done
